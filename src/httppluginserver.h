/*  This file is part of the Tufão project
    Copyright (C) 2012 Vinícius dos Santos Oliveira <vini.ipsmaker@gmail.com>

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 3 of the License, or (at your option) any
    later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef TUFAO_HTTPPLUGINSERVER_H
#define TUFAO_HTTPPLUGINSERVER_H

#include "abstracthttpserverrequesthandler.h"

namespace Tufao {

namespace Priv {

struct HttpPluginServer;

} // namespace Priv

/*!
  This class provides a plugin-based request handler. If you need to change the
  running server code at runtime, then this class is made for you.

  This class maintain its own HttpServerRequestRouter and a list of request
  handlers generated by the plugins to serve requests.

  The main problem solved by a plugin-based server is to store its configuration
  out of the code. This means that the server will need to reload the config
  when appropriate. There are several approaches to solve the problem, but none
  of them can be applied in every case, so this class is designed to work in
  every case by adding a little of effort to you. When the aimed event is
  triggered, call the reloadConfig slot and the configuration will be reloaded.

  To change its configuration file, use the tool shipped with Tufão.

  \sa
  AbstractHttpServerRequestHandlerFactory to implement your plugins.

  \since
  0.3
  */
class TUFAO_EXPORT HttpPluginServer : public AbstractHttpServerRequestHandler
{
    Q_OBJECT
public:
    /*!
      Constructs a HttpPluginServer object.

      \p parent is passed to the QObject constructor.

      \p configFile is used as configuration file.
      */
    explicit HttpPluginServer(const QString &configFile = QString(),
                              QObject *parent = 0);

    /*!
      Destroys the object.
      */
    ~HttpPluginServer();

    /*!
      Set the configuration file used to handle requests.

      Call this function will reload the configuration.

      \sa
      config
      */
    void setConfig(const QString &file);

    /*!
      Return the current used configuration file. This file is used to handle
      requests, loading the appropriate plugins, generating actual handlers and
      mapping them to the rules described in this file.
      */
    QString config() const;

public slots:
    /*!
      Handle the request using the loaded plugins and rules.
      */
    bool handleRequest(Tufao::HttpServerRequest *request,
                       Tufao::HttpServerResponse *response,
                       const QStringList &args = QStringList());

    /*!
      Clear all previous mappings and reload all rules and plugins.

      Call this function after change the configuration file to the changes take
      effect.
      */
    void reloadConfig();

private:
    void clear();

    Priv::HttpPluginServer *priv;
};

} // namespace Tufao

#endif // TUFAO_HTTPPLUGINSERVER_H
